{"/home/travis/build/npmtest/node-npmtest-grunt-newer/test.js":"/* istanbul instrument in package npmtest_grunt_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-newer/lib.npmtest_grunt_newer.js":"/* istanbul instrument in package npmtest_grunt_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_newer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_newer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-newer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-newer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_newer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_newer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_newer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_newer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_newer.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_newer.__dirname +\n                    '/lib.npmtest_grunt_newer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-newer/node_modules/grunt-newer/gruntfile.js":"var assert = require('assert');\nvar path = require('path');\nvar fs = require('fs');\n\n\n/**\n * @param {Object} grunt Grunt.\n */\nmodule.exports = function(grunt) {\n\n  var gruntfileSrc = 'gruntfile.js';\n  var tasksSrc = ['tasks/**/*.js', 'lib/**/*.js'];\n  var testSrc = 'test/**/*.spec.js';\n  var fixturesJs = 'test/integration/fixtures/**/*.js';\n  var fixturesAll = 'test/integration/fixtures/**/*';\n\n  grunt.initConfig({\n\n    cafemocha: {\n      options: {\n        reporter: 'spec'\n      },\n      all: {\n        src: testSrc\n      }\n    },\n\n    jshint: {\n      options: {\n        jshintrc: true\n      },\n      gruntfile: {\n        src: gruntfileSrc\n      },\n      tasks: {\n        src: tasksSrc\n      },\n      tests: {\n        src: testSrc\n      },\n      fixturesJs: {\n        src: fixturesJs\n      }\n    },\n\n    watch: {\n      tasks: {\n        files: tasksSrc,\n        tasks: ['cafemocha']\n      },\n      tests: {\n        files: testSrc,\n        tasks: ['newer:cafemocha']\n      },\n      fixturesAll: {\n        files: fixturesAll,\n        tasks: ['cafemocha']\n      },\n      allJs: {\n        files: [gruntfileSrc, tasksSrc, testSrc, fixturesJs],\n        tasks: ['newer:jshint']\n      }\n    }\n\n  });\n\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-cafe-mocha');\n\n  grunt.registerTask('test', ['newer:jshint', 'cafemocha']);\n\n  grunt.registerTask('default', 'test');\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-newer/node_modules/grunt-newer/lib/util.js":"var crypto = require('crypto');\nvar fs = require('fs');\nvar path = require('path');\n\nvar async = require('async');\n\n/**\n * Filter a list of files by mtime.\n * @param {Array.<string>} paths List of file paths.\n * @param {Date} time The comparison time.\n * @param {number} tolerance Maximum time in milliseconds that the destination\n *     file is allowed to be newer than the source file to compensate for\n *     imprecisions in modification times in file systems.\n * @param {function(string, Date, function(boolean))} override Override.\n * @param {function(Err, Array.<string>)} callback Callback called with any\n *     error and a list of files that have mtimes newer than the provided time.\n */\nvar filterPathsByTime = exports.filterPathsByTime = function(paths, time,\n    tolerance, override, callback) {\n  async.map(paths, fs.stat, function(err, stats) {\n    if (err) {\n      return callback(err);\n    }\n\n    var olderPaths = [];\n    var newerPaths = paths.filter(function(filePath, index) {\n      var newer = stats[index].mtime - time > tolerance;\n      if (!newer) {\n        olderPaths.push(filePath);\n      }\n      return newer;\n    });\n\n    async.filter(olderPaths, function(filePath, include) {\n      override(filePath, time, include);\n    }, function(overrides) {\n      callback(null, newerPaths.concat(overrides));\n    });\n  });\n};\n\n\n/**\n * Determine if any of the given files are newer than the provided time.\n * @param {Array.<string>} paths List of file paths.\n * @param {Date} time The comparison time.\n * @param {number} tolerance Maximum time in milliseconds that the destination\n *     file is allowed to be newer than the source file to compensate for\n *     imprecisions in modification times in file systems.\n * @param {function(string, Date, function(boolean))} override Override.\n * @param {function(Err, boolean)} callback Callback called with any error and\n *     a boolean indicating whether any one of the supplied files is newer than\n *     the comparison time.\n */\nvar anyNewer = exports.anyNewer = function(paths, time, tolerance, override,\n    callback) {\n  if (paths.length === 0) {\n    process.nextTick(function() {\n      callback(null, false);\n    });\n    return;\n  }\n  var complete = 0;\n  function iterate() {\n    fs.stat(paths[complete], function(err, stats) {\n      if (err) {\n        return callback(err);\n      }\n\n      var pathTime = stats.mtime.getTime();\n      var comparisonTime = time.getTime();\n      var difference = pathTime - comparisonTime;\n\n      if (difference > tolerance) {\n        return callback(null, true);\n      } else {\n        override(paths[complete], time, function(include) {\n          if (include) {\n            callback(null, true);\n          } else {\n            ++complete;\n            if (complete >= paths.length) {\n              return callback(null, false);\n            }\n            iterate();\n          }\n        });\n      }\n    });\n  }\n  iterate();\n};\n\n\n/**\n * Filter a list of file config objects by time.  Source files on the provided\n * objects are removed if they have not been modified since the provided time\n * or any dest file mtime for a dest file on the same object.\n * @param {Array.<Object>} files A list of Grunt file config objects.  These\n *     are returned from `grunt.task.normalizeMultiTaskFiles` and have a src\n *     property (Array.<string>) and an optional dest property (string).\n * @param {Date} previous Comparison time.\n * @param {number} tolerance Maximum time in milliseconds that the destination\n *     file is allowed to be newer than the source file to compensate for\n *     imprecisions in modification times in file systems.\n * @param {function(string, Date, function(boolean))} override Override.\n * @param {function(Error, Array.<Object>)} callback Callback called with\n *     modified file config objects.  Objects with no more src files are\n *     filtered from the results.\n */\nvar filterFilesByTime = exports.filterFilesByTime = function(files, previous,\n    tolerance, override, callback) {\n  async.map(files, function(obj, done) {\n    if (obj.dest && !(obj.src.length === 1 && obj.dest === obj.src[0])) {\n      fs.stat(obj.dest, function(err, stats) {\n        if (err) {\n          // dest file not yet created, use all src files\n          return done(null, obj);\n        }\n        return anyNewer(\n          obj.src, stats.mtime, tolerance, override, function(err, any) {\n          done(err, any && obj);\n        });\n      });\n    } else {\n      filterPathsByTime(\n          obj.src, previous, tolerance, override, function(err, src) {\n        if (err) {\n          return done(err);\n        }\n        done(null, {src: src, dest: obj.dest});\n      });\n    }\n  }, function(err, results) {\n    if (err) {\n      return callback(err);\n    }\n    // get rid of file config objects with no src files\n    callback(null, results.filter(function(obj) {\n      return obj && obj.src && obj.src.length > 0;\n    }));\n  });\n};\n\n\n/**\n * Get path to cached file hash for a target.\n * @param {string} cacheDir Path to cache dir.\n * @param {string} taskName Task name.\n * @param {string} targetName Target name.\n * @param {string} filePath Path to file.\n * @return {string} Path to hash.\n */\nvar getHashPath = exports.getHashPath = function(cacheDir, taskName, targetName,\n    filePath) {\n  var hashedName = crypto.createHash('md5').update(filePath).digest('hex');\n  return path.join(cacheDir, taskName, targetName, 'hashes', hashedName);\n};\n\n\n/**\n * Get an existing hash for a file (if it exists).\n * @param {string} filePath Path to file.\n * @param {string} cacheDir Cache directory.\n * @param {string} taskName Task name.\n * @param {string} targetName Target name.\n * @param {function(Error, string} callback Callback called with an error and\n *     file hash (or null if the file doesn't exist).\n */\nvar getExistingHash = exports.getExistingHash = function(filePath, cacheDir,\n    taskName, targetName, callback) {\n  var hashPath = getHashPath(cacheDir, taskName, targetName, filePath);\n  fs.exists(hashPath, function(exists) {\n    if (!exists) {\n      return callback(null, null);\n    }\n    fs.readFile(hashPath, callback);\n  });\n};\n\n\n/**\n * Generate a hash (md5sum) of a file contents.\n * @param {string} filePath Path to file.\n * @param {function(Error, string)} callback Callback called with any error and\n *     the hash of the file contents.\n */\nvar generateFileHash = exports.generateFileHash = function(filePath, callback) {\n  var md5sum = crypto.createHash('md5');\n  var stream = new fs.ReadStream(filePath);\n  stream.on('data', function(chunk) {\n    md5sum.update(chunk);\n  });\n  stream.on('error', callback);\n  stream.on('end', function() {\n    callback(null, md5sum.digest('hex'));\n  });\n};\n\n\n/**\n * Filter files based on hashed contents.\n * @param {Array.<string>} paths List of paths to files.\n * @param {string} cacheDir Cache directory.\n * @param {string} taskName Task name.\n * @param {string} targetName Target name.\n * @param {function(Error, Array.<string>)} callback Callback called with any\n *     error and a filtered list of files that only includes files with hashes\n *     that are different than the cached hashes for the same files.\n */\nvar filterPathsByHash = exports.filterPathsByHash = function(paths, cacheDir,\n    taskName, targetName, callback) {\n  async.filter(paths, function(filePath, done) {\n    async.parallel({\n      previous: function(cb) {\n        getExistingHash(filePath, cacheDir, taskName, targetName, cb);\n      },\n      current: function(cb) {\n        generateFileHash(filePath, cb);\n      }\n    }, function(err, hashes) {\n      if (err) {\n        return callback(err);\n      }\n      done(String(hashes.previous) !== String(hashes.current));\n    });\n  }, callback);\n};\n\n\n/**\n * Filter a list of file config objects based on comparing hashes of src files.\n * @param {Array.<Object>} files List of file config objects.\n * @param {string} taskName Task name.\n * @param {string} targetName Target name.\n * @param {function(Error, Array.<Object>)} callback Callback called with a\n *     filtered list of file config objects.  Object returned will only include\n *     src files with hashes that are different than any cached hashes.  Config\n *     objects with no src files will be filtered from the list.\n */\nvar filterFilesByHash = exports.filterFilesByHash = function(files, taskName,\n    targetName, callback) {\n  var modified = false;\n  async.map(files, function(obj, done) {\n\n    filterPathsByHash(obj.src, taskName, targetName, function(err, src) {\n      if (err) {\n        return done(err);\n      }\n      if (src.length) {\n        modified = true;\n      }\n      done(null, {src: src, dest: obj.dest});\n    });\n\n  }, function(err, newerFiles) {\n    callback(err, newerFiles, modified);\n  });\n};\n\n\n/**\n * Get the path to the cached timestamp for a target.\n * @param {string} cacheDir Path to cache dir.\n * @param {string} taskName Task name.\n * @param {string} targetName Target name.\n * @return {string} Path to timestamp.\n */\nvar getStampPath = exports.getStampPath = function(cacheDir, taskName,\n    targetName) {\n  return path.join(cacheDir, taskName, targetName, 'timestamp');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-newer/node_modules/grunt-newer/tasks/newer.js":"var fs = require('fs');\nvar path = require('path');\n\nvar async = require('async');\nvar rimraf = require('rimraf');\n\nvar util = require('../lib/util');\n\nvar counter = 0;\nvar configCache = {};\n\nfunction cacheConfig(config) {\n  ++counter;\n  configCache[counter] = config;\n  return counter;\n}\n\nfunction pluckConfig(id) {\n  if (!configCache.hasOwnProperty(id)) {\n    throw new Error('Failed to find id in cache');\n  }\n  var config = configCache[id];\n  delete configCache[id];\n  return config;\n}\n\nfunction nullOverride(details, include) {\n  include(false);\n}\n\nfunction createTask(grunt) {\n  return function(taskName, targetName) {\n    var tasks = [];\n    var prefix = this.name;\n    if (!targetName) {\n      if (!grunt.config(taskName)) {\n        grunt.fatal('The \"' + prefix + '\" prefix is not supported for aliases');\n        return;\n      }\n      Object.keys(grunt.config(taskName)).forEach(function(targetName) {\n        if (!/^_|^options$/.test(targetName)) {\n          tasks.push(prefix + ':' + taskName + ':' + targetName);\n        }\n      });\n      return grunt.task.run(tasks);\n    }\n    var args = Array.prototype.slice.call(arguments, 2).join(':');\n    var options = this.options({\n      cache: path.join(__dirname, '..', '.cache'),\n      override: nullOverride,\n      tolerance: 0 // allowed difference between src and dst in ms\n    });\n\n    // support deprecated timestamps option\n    if (options.timestamps) {\n      grunt.log.warn('DEPRECATED OPTION.  Use the \"cache\" option instead');\n      options.cache = options.timestamps;\n    }\n\n    // Sanity check for the tolerance option\n    if (typeof options.tolerance !== 'number') {\n      grunt.log.warn('The tolerance value must be a number, ignoring current ' +\n      'value');\n      options.tolerance = 0;\n    }\n    if (options.tolerance < 0) {\n      grunt.log.warn('A tolerance value of ' + options.tolerance +\n      ' is invalid');\n      options.tolerance = 0;\n    }\n\n    var done = this.async();\n\n    var originalConfig = grunt.config.get([taskName, targetName]);\n    var config = grunt.util._.clone(originalConfig);\n\n    /**\n     * Special handling for tasks that expect the `files` config to be a string\n     * or array of string source paths.\n     */\n    var srcFiles = true;\n    if (typeof config.files === 'string') {\n      config.src = [config.files];\n      delete config.files;\n      srcFiles = false;\n    } else if (Array.isArray(config.files) &&\n        typeof config.files[0] === 'string') {\n      config.src = config.files;\n      delete config.files;\n      srcFiles = false;\n    }\n\n    var stamp = util.getStampPath(options.cache, taskName, targetName);\n    var previous;\n    try {\n      previous = fs.statSync(stamp).mtime;\n    } catch (err) {\n      // task has never succeeded before\n      previous = new Date(0);\n    }\n\n    function override(filePath, time, include) {\n      var details = {\n        task: taskName,\n        target: targetName,\n        path: filePath,\n        time: time\n      };\n      options.override(details, include);\n    }\n\n    var files = grunt.task.normalizeMultiTaskFiles(config, targetName);\n    util.filterFilesByTime(\n      files, previous, options.tolerance, override, function(e, newerFiles) {\n      if (e) {\n        return done(e);\n      } else if (newerFiles.length === 0) {\n        grunt.log.writeln('No newer files to process.');\n        return done();\n      }\n\n      /**\n       * If we started out with only src files in the files config,\n       * transform the newerFiles array into an array of source files.\n       */\n      if (!srcFiles) {\n        newerFiles = newerFiles.map(function(obj) {\n          return obj.src;\n        });\n      }\n\n      // configure target with only newer files\n      config.files = newerFiles;\n      delete config.src;\n      delete config.dest;\n      grunt.config.set([taskName, targetName], config);\n\n      // because we modified the task config, cache the original\n      var id = cacheConfig(originalConfig);\n\n      // run the task, and attend to postrun tasks\n      var qualified = taskName + ':' + targetName;\n      var tasks = [\n        qualified + (args ? ':' + args : ''),\n        'newer-postrun:' + qualified + ':' + id + ':' + options.cache\n      ];\n      grunt.task.run(tasks);\n\n      done();\n    });\n\n  };\n}\n\n\n/** @param {Object} grunt Grunt. */\nmodule.exports = function(grunt) {\n\n  grunt.registerTask(\n      'newer', 'Run a task with only those source files that have been ' +\n      'modified since the last successful run.', createTask(grunt));\n\n  var deprecated = 'DEPRECATED TASK.  Use the \"newer\" task instead';\n  grunt.registerTask(\n      'any-newer', deprecated, function() {\n        grunt.log.warn(deprecated);\n        var args = Array.prototype.join.call(arguments, ':');\n        grunt.task.run(['newer:' + args]);\n      });\n\n  var internal = 'Internal task.';\n  grunt.registerTask(\n      'newer-postrun', internal, function(taskName, targetName, id, dir) {\n\n        // if dir includes a ':', grunt will split it among multiple args\n        dir = Array.prototype.slice.call(arguments, 3).join(':');\n        grunt.file.write(util.getStampPath(dir, taskName, targetName),\n            String(Date.now()));\n\n        // reconfigure task with original config\n        grunt.config.set([taskName, targetName], pluckConfig(id));\n\n      });\n\n  var clean = 'Remove cached timestamps.';\n  grunt.registerTask(\n      'newer-clean', clean, function(taskName, targetName) {\n        var done = this.async();\n\n        /**\n         * This intentionally only works with the default cache dir.  If a\n         * custom cache dir is provided, it is up to the user to keep it clean.\n         */\n        var cacheDir = path.join(__dirname, '..', '.cache');\n        if (taskName && targetName) {\n          cacheDir = util.getStampPath(cacheDir, taskName, targetName);\n        } else if (taskName) {\n          cacheDir = path.join(cacheDir, taskName);\n        }\n        if (grunt.file.exists(cacheDir)) {\n          grunt.log.writeln('Cleaning ' + cacheDir);\n          rimraf(cacheDir, done);\n        } else {\n          done();\n        }\n      });\n\n};\n"}